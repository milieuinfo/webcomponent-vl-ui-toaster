/**
 * Toaster
 */

/**
 * Private Variables
 */
const toasterClass = `${vl.ns}toaster`,
  toasterFadeClass = `${toasterClass}--fade`,
  alertClass = `${vl.ns}alert`,
  alertCloseClass = `${alertClass}__close`,
  dataPrefix = `data-${vl.ns}`,
  toasterAtt = `${dataPrefix}toaster`,
  toasterDressedAtt = `${toasterAtt}-dressed`,
  toasterFadeoutAtt = `${toasterAtt}-fadeout`;

/**
 * Private Functions
 */
const _addAlert = (alert) => {
  vl.util.addClass(alert, toasterFadeClass);
  window.setTimeout(() => {
    vl.util.removeClass(alert, toasterFadeClass);
  }, 300);
};

const _removeAlert = (alert) => {
  vl.util.addClass(alert, toasterFadeClass);
  window.setTimeout(() => {
    alert.remove();
  }, 300);
};

const _bindCloseButtons = (actions) => {
  vl.util.each(actions, action => {
    action.addEventListener('click', e => {
      _removeAlert(e.currentTarget.parentElement);
    });
  });
};

const _observeToaster = (event) => {
  let toaster = event[0].target,
    firstAlert = toaster.firstElementChild,
    newAlert = toaster.lastElementChild;

  // detect if alert is added
  if(event[0].addedNodes.length > 0) {
    _addAlert(newAlert);
    _bindCloseButtons(newAlert.querySelectorAll(`.${alertCloseClass}`));
    if(toaster.getAttribute(toasterFadeoutAtt) === 'true') {
      window.setTimeout(() => {
        _removeAlert(newAlert);
      }, 5000);
    }
  }

  // when five or more alerts are visible
  if(toaster.childElementCount > 5) {
    _removeAlert(firstAlert);
  }
};

class Toaster {
  dress(toaster) {
    toaster.setAttribute(toasterDressedAtt, true);

    let observer = new window.MutationObserver(_observeToaster),
      actions = toaster.querySelectorAll(`.${alertCloseClass}`);

    observer.observe(toaster, {attributes: true, childList: true});

    _bindCloseButtons(actions);
  }

  dressAll() {
    let elements = document.querySelectorAll(
      `.${toasterClass}:not([${toasterDressedAtt}]):not([data-${vl.ns}js-dress="false"]),
      [${toasterAtt}]:not([${toasterDressedAtt}]):not([data-${vl.ns}js-dress="false"])`
    );

    vl.util.each(elements, element => {
      this.dress(element);
    });
  }
}

if (!('toaster' in vl)) {
  vl.toaster = new Toaster();
  vl.toaster.dressAll();
}

export default Toaster;
